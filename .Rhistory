country.melt.sd.df[which.max(abs(country.melt.sd.df[,"value"])),c("variable","value")]
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive")],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
ggplot(country.melt.sd.df[which(country.melt.sd.df[,"social"]=="governance")],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
ggplot(country.melt.sd.df[which(country.melt.sd.df[,"social"]=="governance")],aes(x=variable,y=value))+geom_violin()
ggplot(country.melt.sd.df[which(country.melt.sd.df[,"social"]=="governance"),],aes(x=variable,y=value))+geom_violin()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) sd(z,na.rm=TRUE)/abs(mean(z,na.rm=TRUE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.sd.df<-merge(country.melt.sd.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive")],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) abs(sd(z,na.rm=TRUE)/mean(z,na.rm=TRUE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.sd.df<-merge(country.melt.sd.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
country.df<-data.frame("country"=sort(unique(QoG.sel.df$ccodealp)))
#country.df[,paste(QoG.sel.vars,"mean",sep=".")]<-NA
#country.df[,paste(QoG.sel.vars,"median",sep=".")]<-NA
### CALCULATING WITHIN COUNTRY STANDARD DEVIATION
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) abs(sd(z,na.rm=TRUE)/mean(z,na.rm=TRUE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.sd.df<-merge(country.melt.sd.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
country.df<-data.frame("country"=sort(unique(QoG.sel.df$ccodealp)))
#country.df[,paste(QoG.sel.vars,"mean",sep=".")]<-NA
#country.df[,paste(QoG.sel.vars,"median",sep=".")]<-NA
### CALCULATING WITHIN COUNTRY STANDARD DEVIATION
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) abs(sd(z,na.rm=TRUE)/mean(z,na.rm=TRUE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.sd.df<-merge(country.melt.sd.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
hist(country.melt.sd.df$value)
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
names(country.df)
country.df<-data.frame("country"=sort(unique(QoG.sel.df$ccodealp)))
#country.df[,paste(QoG.sel.vars,"mean",sep=".")]<-NA
#country.df[,paste(QoG.sel.vars,"median",sep=".")]<-NA
### CALCULATING WITHIN COUNTRY STANDARD DEVIATION
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) abs(sd(z,na.rm=TRUE)/mean(z,na.rm=TRUE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.sd<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) abs(sd(z,na.rm=TRUE)/mean(z,na.rm=TRUE)))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.sd))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.sd.df<-melt(country.df[,c("country",names(QoG.sd))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.sd.df<-merge(country.melt.sd.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
x11()
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free")
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]=="cam_inclusive"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]%in%c("cam_inclusive","wbgi_cce"),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
ggplot(country.melt.sd.df[-which(country.melt.sd.df[,"variable"]%in%c("cam_inclusive","wbgi_cce")),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
?unique
length(unique(c(NA,NA)))
length(unique(c(NA,NA),na.rm=TRUE))
unique(c(NA,NA),na.rm=TRUE)
length(is.na(unique(c(NA,NA),na.rm=TRUE)==FALSE)
)
length(which(is.na(unique(c(NA,NA),na.rm=TRUE)==FALSE)))
is.na(unique(c(NA,NA),na.rm=TRUE)==FALSE)
is.na(unique(c(NA,NA),na.rm=TRUE))
which(is.na(unique(c(NA,NA),na.rm=TRUE))==FALSE)
length(which(is.na(unique(c(NA,NA),na.rm=TRUE))==FALSE))
country.df<-data.frame("country"=sort(unique(QoG.sel.df$ccodealp)))
#country.df[,paste(QoG.sel.vars,"mean",sep=".")]<-NA
#country.df[,paste(QoG.sel.vars,"median",sep=".")]<-NA
### CALCULATING WITHIN COUNTRY STANDARD DEVIATION
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.unique<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) length(which(is.na(unique(z),na.rm=TRUE))==FALSE)))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
QoG.unique<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) length(which(is.na(unique(z),na.rm=TRUE))==FALSE))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.unique))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.unique.df<-melt(country.df[,c("country",names(QoG.unique))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.unique.df<-merge(country.melt.unique.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
#x11()
ggplot(country.melt.unique.df[-which(country.melt.unique.df[,"variable"]%in%c("cam_inclusive","wbgi_cce")),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
QoG.sel.df<-QoG.sel.df[order(QoG.sel.df$ccodealp),]
QoG.unique<-as.data.frame(apply(QoG.sel.df[,QoG.sel.vars],2,function(x,y=QoG.sel.df$ccodealp) tapply(x,y,function(z) length(which(is.na(unique(z,na.rm=TRUE))==FALSE)))))
#names(QoG.sd)<-paste(names(QoG.sd),"sd",sep=".")
country.df<-as.data.frame(cbind(country.df,QoG.unique))
#country.df[,paste(QoG.sel.vars,"sd",sep=".")]<-QoG.sd
country.melt.unique.df<-melt(country.df[,c("country",names(QoG.unique))])
#country.melt.sd.df[,"variable"]<-gsub(".sd","")
country.melt.unique.df<-merge(country.melt.unique.df,var.df,by.x="variable",by.y="varcode",all.x=TRUE)
#x11()
ggplot(country.melt.unique.df[-which(country.melt.unique.df[,"variable"]%in%c("cam_inclusive","wbgi_cce")),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
x11()
ggplot(country.melt.unique.df[-which(country.melt.unique.df[,"variable"]%in%c("cam_inclusive","wbgi_cce")),],aes(x=variable,y=value))+geom_violin()+facet_wrap(~social,scales="free",ncol=2)
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- TRUE # TRUE, FALSE
html_switch <- TRUE # TRUE, FALSE
md_switch <- TRUE # TRUE, FALSE
pdf_switch <- TRUE # TRUE, FALSE
word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
#html_switch <- FALSE # TRUE, FALSE
#md_switch <- FALSE # TRUE, FALSE
#pdf_switch <- FALSE # TRUE, FALSE
#word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
?pairwise.wilcox.test
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- TRUE # TRUE, FALSE
html_switch <- TRUE # TRUE, FALSE
md_switch <- TRUE # TRUE, FALSE
pdf_switch <- TRUE # TRUE, FALSE
word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
#html_switch <- FALSE # TRUE, FALSE
#md_switch <- FALSE # TRUE, FALSE
#pdf_switch <- FALSE # TRUE, FALSE
#word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- FALSE # TRUE,
html_switch <- TRUE # TRUE, FALSE
md_switch <- TRUE # TRUE, FALSE
pdf_switch <- TRUE # TRUE, FALSE
word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
#html_switch <- FALSE # TRUE, FALSE
#md_switch <- FALSE # TRUE, FALSE
#pdf_switch <- FALSE # TRUE, FALSE
#word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- FALSE # TRUE,
html_switch <- FALSE # TRUE, FALSE
md_switch <- TRUE # TRUE, FALSE
pdf_switch <- TRUE # TRUE, FALSE
word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
#html_switch <- FALSE # TRUE, FALSE
#md_switch <- FALSE # TRUE, FALSE
#pdf_switch <- FALSE # TRUE, FALSE
#word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- FALSE # TRUE,
html_switch <- FALSE # TRUE, FALSE
md_switch <- TRUE # TRUE, FALSE
pdf_switch <- TRUE # TRUE, FALSE
word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
#html_switch <- FALSE # TRUE, FALSE
#md_switch <- FALSE # TRUE, FALSE
#pdf_switch <- FALSE # TRUE, FALSE
#word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
library(rmarkdown)
wd<- "G:/Documents/PostDocKVA/Labbook/"
html.output.dir<-"G:/Documents/PostDocKVA/Labbook/psjorgensen.github.com/_posts"
project.title<- "macro-socio-ecology"
docs.vec<-c("macro-socio-ecology-outline","macro-socio-ecology-variables")
htmlpost_switch <- TRUE # TRUE,
#html_switch <- TRUE # TRUE, FALSE
#md_switch <- TRUE # TRUE, FALSE
#pdf_switch <- TRUE # TRUE, FALSE
#word_switch <- TRUE # TRUE, FALSE
#htmlpost_switch <- FALSE # TRUE, FALSE
html_switch <- FALSE # TRUE, FALSE
md_switch <- FALSE # TRUE, FALSE
pdf_switch <- FALSE # TRUE, FALSE
word_switch <- FALSE # TRUE, FALSE
setwd(paste(wd,"projects/",project.title,sep=""))
for(i in 2){#c(1:6)){#1:length(docs.vec)){
# html
if(htmlpost_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=html.output.dir,
output_file=paste(Sys.Date(),"-",docs.vec[i],".html",sep="")
)
}
# html
if(html_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="html_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".html",sep="")
)
}
# word
if(word_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="word_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".docx",sep="")
)
}
# md
if(md_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="md_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".md",sep="")
)
}
# pdf
if(pdf_switch == TRUE){
render(
input=paste(docs.vec[i],".Rmd",sep=""),
output_format="pdf_document",
output_dir=getwd(),
output_file=paste(docs.vec[i],".pdf",sep="")
)
}
}
####  END
install.packages(c("shiny", "htmlwidgets"))
install.packages(ggvis)
install.packages("ggvis")
install.packages("BH")
?shinyAppDir
library(shiny)
?shinyAppDir
